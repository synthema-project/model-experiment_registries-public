pipeline {
    agent {
        node {
            label 'jenkins-dev'
        }
    }

    stages {
        stage("Deployment"){
            steps {
                script {
                    if (params.standalone) {
                        sh 'cp templates/dotenv_standalone .env'
                    } else {
                        sh 'cp templates/dotenv_stack .env'
                    }
                }

                withKubeConfig([credentialsId: 'k8s-admin']) {
                    sh 'kubectl apply -f k8/deployment.yaml'
                    sleep 20
               }
            }
        }
        stage("Functional test") {
    steps {
        script {
            withKubeConfig([credentialsId: 'k8s-admin']) {
                // Get the service port
                def servicePort = sh(script: 'kubectl get svc mlflow-dsb-svc -n synthema-dev -o jsonpath={.spec.ports[0].port}', returnStdout: true).trim()
                // Use the internal ClusterIP DNS to reach the service
                def serviceHost = 'mlflow-dsb-svc.synthema-dev.svc.cluster.local'
                def clusterIP = sh(script: 'kubectl get svc mlflow-dsb-svc -n synthema-dev -o jsonpath={.spec.clusterIP}', returnStdout: true).trim()
                sh "curl -f http://${clusterIP}:${servicePort}/health"
            }
        }
    }
}
    }
    post{
        failure {
            withKubeConfig([credentialsId: 'k8s-admin']) {
                 //sh 'kubectl delete -f k8/deployment.yaml'
            }
        //     // slackSend (color: "#FF0000", message: "Job FAILED: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        //     sh 'docker image rm ${APP_NAME}:test &> /dev/null || True'
        //     sh 'DOCKER_TAG=test docker compose down --rmi all'
        }

        // success{
        //     slackSend (color: "#008000", message: "Job SUCCESSFUL: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        // }
    }
}
